package Feliks.ALLSecDb.model;


import jakarta.persistence.*;
import jakarta.validation.constraints.*;
import org.springframework.stereotype.Component;


import java.util.List;

@Entity //Без этого не создастся бин, и, следовательно, таблица
@Table(name = "users")
@Component
public class User {
    @Column(name="id")
    @Id
    @GeneratedValue (strategy = GenerationType.IDENTITY)//!!! В постгресе тоже надо ставить generated by default as identity
    private int id;

    @Column (unique = true, name="username")//Проверка уникальности только, если таблица создана тут кодом (DDL)
    //@UniqueElements(message = "This name already exists")TODO Проверка уникальности
    @NotBlank (message = "Name should not be empty") //Для объектов NotEmpty
    @Size(min = 2, max = 10, message = "Name should be between 2 and 10 symbols")

    private String username;

    @Column (name="password")
    //@NotBlank (message = "Password cannot be empty")
    private String password;

    @Column (name = "email")
    @NotBlank(message = "Email cannot be empty")
    @Email
    private String email;

    @Column (name = "role")
    @NotBlank(message = "Role cannot be empty")
    //CЮда добавим manyToOne Отношение с выпадающим списком
    private String role;


    @Column (name = "house")
    @NotBlank(message = "House cannot be empty")
    @OneToMany (mappedBy = "user", fetch = FetchType.LAZY, cascade = CascadeType.ALL)
    //CЮда добавим manyToOne Отношение с выпадающим списком
    private List<House> houses;

    public User() {
    } //пользователь создавался напрямую из конструктора



    public User(String username, String password, String role, String email) {
        this.username = username;
        this.password = password;
        this.role = role;
        this.email=email;
    }

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public String getUsername() {
        return username;
    }

    public void setUsername(String username) {
        this.username = username;
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    public String getPassword() {
        return password;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    public String getRole() {
        return role;
    }

    public void setRole(String role) {
        this.role = role;
    }





//    @ManyToMany(cascade=CascadeType.ALL,fetch=FetchType.EAGER)
//    @JoinTable(name="user_role",
//            joinColumns = {@JoinColumn(name="user_id", referencedColumnName="id")},
//            inverseJoinColumns = {@JoinColumn(name="role_id", referencedColumnName="id")}
//    )
    //private List <Role> roles;*/

    //private List <Role> roles;


    @Override
    public String toString() {
        return "User{" +
                "id=" + id +
                ", username='" + username + '\'' +
                ", password='" + password + '\'' +
                ", email='" + email + '\'' +
                ", role='" + role + '\'' +
                '}';
    }
}
